// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
  // directUrl = env("DIRECT_URL")
}

model Role {
  id        String    @id @default(cuid())
  role      String    @unique @db.VarChar(255)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  createdBy String
  updatedBy String?
  User      User[]
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique @db.VarChar(255)
  pwd       String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  createdBy String
  updatedBy String?
  Book      Book[]
  Cat       Cat[]
  Ledger    Ledger[]
}

model Book {
  id        String    @id @default(cuid())
  name      String    @unique @db.VarChar(255)
  summary   Int       @default(0)
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  createdBy String
  updatedBy String?
  Cat       Cat[]
  Ledger    Ledger[]
}

model Cat {
  id        String    @id @default(cuid())
  type      Type
  cat       String
  max       Int       @default(0)
  book      Book      @relation(fields: [bookId], references: [id])
  bookId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  createdBy String
  updatedBy String?
  Ledger    Ledger[]
}

model Ledger {
  id        String    @id @default(cuid())
  type      Type
  amount    Int       @default(0)
  remarks   String
  cat       Cat       @relation(fields: [catId], references: [id])
  catId     String
  book      Book      @relation(fields: [bookId], references: [id])
  bookId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  createdBy String
  updatedBy String?
}

enum Type {
  EXP
  ERN
  SAV
  TRF
}
